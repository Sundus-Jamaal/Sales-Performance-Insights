-- 1. Top-Performing Products (Correlated Subquery)
-- Purpose: To identify the top-performing products based on total sales amount.
SELECT product_id, product_name, total_sales
FROM (
    SELECT p.product_id, p.product_name, SUM(t.amount_spent) AS total_sales
    FROM products p
    JOIN transactions t ON p.product_id = t.product_id
    GROUP BY p.product_id, p.product_name
) AS product_sales
WHERE total_sales > (
    SELECT AVG(total_sales) FROM (
        SELECT SUM(t.amount_spent) AS total_sales
        FROM products p
        JOIN transactions t ON p.product_id = t.product_id
        GROUP BY p.product_id
    ) AS avg_sales
);
-- Insight: Finds products whose sales are higher than the average total sales of all products.

-- 2. Sales Trends Over Time (CTEs)
-- Purpose: To track sales trends over time and analyze monthly sales performance.
WITH monthly_sales AS (
    SELECT DATE_TRUNC('month', transaction_date) AS sales_month, SUM(amount_spent) AS total_sales
    FROM transactions
    GROUP BY sales_month
)
SELECT sales_month, total_sales
FROM monthly_sales
ORDER BY sales_month;
-- Insight: Tracks the total sales for each month and allows for trend analysis over time.

-- 3. Top Products by Quantity Sold (Aggregation and Joins)
-- Purpose: To identify the top-selling products based on the total quantity sold.
SELECT p.product_name, SUM(t.quantity_sold) AS total_quantity_sold
FROM products p
JOIN transactions t ON p.product_id = t.product_id
GROUP BY p.product_name
ORDER BY total_quantity_sold DESC;
-- Insight: Determines which products are sold in the highest quantities, offering insight into product demand.

-- 4. Average Transaction Amount by Product (Correlated Subquery)
-- Purpose: To find the average transaction amount for each product.
SELECT p.product_name, AVG(t.amount_spent) AS avg_transaction
FROM products p
JOIN transactions t ON p.product_id = t.product_id
GROUP BY p.product_name
ORDER BY avg_transaction DESC;
-- Insight: Helps analyze the average transaction amount for each product, useful for pricing strategies.

-- 5. Total Revenue by Product Category (CTE and Aggregation)
-- Purpose: To calculate the total revenue generated by each product category.
WITH category_revenue AS (
    SELECT p.product_category, SUM(t.amount_spent) AS total_revenue
    FROM products p
    JOIN transactions t ON p.product_id = t.product_id
    GROUP BY p.product_category
)
SELECT product_category, total_revenue
FROM category_revenue
ORDER BY total_revenue DESC;
-- Insight: Provides insights into which product categories generate the most revenue, helping businesses focus on profitable categories.

-- 6. Customer Purchases Over Time (Window Functions)
-- Purpose: To track how much each customer has spent over time using a window function.
SELECT t.customer_id, t.transaction_date, SUM(t.amount_spent) OVER (PARTITION BY t.customer_id ORDER BY t.transaction_date) AS cumulative_spending
FROM transactions t
ORDER BY t.customer_id, t.transaction_date;
-- Insight: Tracks cumulative spending for each customer over time, offering insights into customer loyalty and purchasing patterns.

-- 7. Customer Segmentation Based on Spending Patterns
-- Purpose: To categorize customers based on their spending behavior using a Common Table Expression (CTE).
WITH customer_totals AS (
    SELECT c.customer_id, c.customer_name, SUM(t.amount_spent) AS total_spent
    FROM customers c
    JOIN transactions t ON c.customer_id = t.customer_id
    GROUP BY c.customer_id, c.customer_name
)
SELECT customer_id, customer_name, total_spent,
CASE
    WHEN total_spent > 1000 THEN 'High-Spender'
    WHEN total_spent BETWEEN 500 AND 1000 THEN 'Mid-Spender'
    ELSE 'Low-Spender'
END AS spending_segment
FROM customer_totals;
-- Insight: Segments customers to help tailor marketing strategies.

-- 8. Year-Over-Year Sales Comparison
-- Purpose: To compare sales from this year to last year.
SELECT 
    EXTRACT(YEAR FROM transaction_date) AS sales_year, 
    SUM(amount_spent) AS total_sales
FROM transactions
GROUP BY sales_year
ORDER BY sales_year;
-- Insight: Provides a year-over-year comparison for better strategic planning.

-- 9. Identify Seasonal Trends in Product Sales
-- Purpose: To analyze product sales by season.
SELECT 
    p.product_name, 
    CASE 
        WHEN EXTRACT(MONTH FROM t.transaction_date) IN (12, 1, 2) THEN 'Winter'
        WHEN EXTRACT(MONTH FROM t.transaction_date) IN (3, 4, 5) THEN 'Spring'
        WHEN EXTRACT(MONTH FROM t.transaction_date) IN (6, 7, 8) THEN 'Summer'
        ELSE 'Fall' 
    END AS season,
    SUM(t.amount_spent) AS seasonal_sales
FROM products p
JOIN transactions t ON p.product_id = t.product_id
GROUP BY p.product_name, season
ORDER BY seasonal_sales DESC;
-- Insight: Identifies which products perform well in different seasons, aiding inventory and marketing strategies.
